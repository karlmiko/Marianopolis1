Karl Michel Koerich - 1631968
Lab 8
Professor Vincent
Section 2
Nov 14, 2017

1.2.  Fixed, 7% Total payments = $479010
	  Fixed, 5%, 3.25 points Total payments = $393007
 	  4.5% for 48 months, then 9.5% Total payments = $551432
	
1.3.  By calling the base class before other additional work
	  in the constructor, we are ensuring that all fields of the base
	  class are being initialised and enables us to use them.
	
1.4.  In this case, the method super().makePayment() is called after because
	  we want some extra operations to alter the value of the attributes
	  before calling the method, otherwise makePayment() from TeaserRate
	  would be the same method as super().makePayment() and it would
	  change the attributes afterwards.
	
1.5.  Fixed, 7% Total payments = $479010
	  Fixed, 5%, 3.25 points Total payments = $393007
	  Fixed, 7.5% Total payments = $503426
	  4.5% for 48 months, then 9.5% Total payments = $551432

1.6.  Fixed, 7% Total payments = $432048
	  Fixed, 5%, 3.25 points Total payments = $365938
	  Fixed, 7.5% Total payments = $450322
	  4.5% for 48 months, then 9.5% Total payments = $489810

2.1.  The __init__ does not nned return since its role is to initialise an object
	  from a specific class, therefore it is not returning any value, only
	  storing the object in memory.
	  
2.2.  >>> from fraction import fraction 
	  >>> frac1 = fraction(45, 8)
	  >>> frac2 = fraction(3, 4) 
	  >>> print(frac1 + frac2)
	  fraction(51, 8)
	  
2.5.  >>>from fraction import fraction 
      >>> a = fraction(1, 2)
      >>> b = fraction(5, 1)
      >>> a
      fraction(1, 2)
      >>> b
      fraction(5, 1)
      >>> print(a)
      1/2
      >>> print(b)
      5

2.6	  __str__ OK
      Traceback (most recent call last):
        File "\\students1\foldred$\1631968\Desktop\Lab8\fraction.py", line 62, in <module>
          assert a + b == fraction(5, 6) # requires __eq__
      AssertionError
	  
2.7	  def __eq__(self, other):
        return self.__num == other.__num and self.__den == other.__den

2.8   def __mul__(self, other):
    	'''Multiply two fraction objects, yielding a new fraction object.'''
        new_num = self.__num * other.__num
        new_den = self.__den * other.__den
        return fraction(new_num, new_den)

2.9    OUTPUT: __str__ OK
			__eq__ OK
			All OK

3.1	  # Transforming an int to a fraction to perform operations
      if not isinstance(other, fraction):
      	other = fraction(other)

      OUTPUT:	>>> f1 = fraction(5, 3)
				>>> f1
				fraction(5, 3)
				>>> f1 + 3
				fraction(14, 3)
				>>> f2 = fraction(2, 3)
				>>> f2
				fraction(2, 3)
				>>> f1+f2
				fraction(7, 3)
				>>> f2 + 2
				fraction(8, 3)
	  
	  OUTPUT:	>>> f2 = fraction(54, 32) 
				>>> f2
				fraction(27, 16)
				>>> f3 = fraction(34, 7)
				>>> f2*f3
				fraction(459, 56)

I did not copy and paste the entire IDLE session; it was too big and messy. Instead, I copied and pasted important parts only.
